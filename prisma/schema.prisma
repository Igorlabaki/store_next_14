// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATA_BASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  Cart          Cart?
  accounts      Account[]
  sessions      Session[]

  // refresh_token RefreshToken[]

  @@map("users")
}

model Brand {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String 
  Products  Product[]

  @@map("brands")
}

model Product {
  id        String   @id @default(uuid())
  imageUrl  String 
  name      String
  price     String
  brand     Brand @relation(fields: [fk_brand_id], references: [id], onDelete: Cascade)
  fk_brand_id  String
  ProductCart  ProductCart[]

  @@index([fk_brand_id])

  
  @@map("products")
}

model Cart {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @unique
  ProductCart ProductCart[]
  total      Int            @default(0)

  @@map("carts")
}

model ProductCart {
  id            String   @id @default(uuid())
  product       Product  @relation(fields: [fk_id_product], references: [id], onDelete: Cascade)
  fk_id_product String
  cart          Cart     @relation(fields: [fk_id_cart], references: [id], onDelete: Cascade)
  fk_id_cart    String
  created_at    DateTime @default(now())
  updatedAt     DateTime @updatedAt
  quantity      Int      @default(0)

  @@map("product_carts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// model RefreshToken {
//  id       String @id @default(uuid())
//  expireIn Int
//  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//  userId   String @unique

//  @@map("refresh_tokens")
// }
